{"version":3,"sources":["store/reducer.js","components/Navbar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["initialState","language","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","value","Navbar","props","_useState","useState","_useState2","slicedToArray","lang","setLang","useEffect","changeLanguage","react_default","a","createElement","className","onChange","event","target","Home","index_es","id","connect","dispatch","components_Navbar","components_Home","Boolean","window","location","hostname","match","addLocaleData","concat","toConsumableArray","locale_en","locale_fr","messages","en","messages_en","fr","messages_fr","store","createStore","subscribe","getState","renderIndex","ReactDOM","render","locale","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ooBAAMA,EAAe,CACnBC,SAAU,MAWGC,EATC,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACb,IAAK,kBACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBF,SAAUM,EAAOI,QAEtC,QACE,OAAOR,YCeES,SArBA,SAAAC,GAAS,IAAAC,EACEC,mBAASF,EAAMZ,UADjBe,EAAAP,OAAAQ,EAAA,EAAAR,CAAAK,EAAA,GACfI,EADeF,EAAA,GACTG,EADSH,EAAA,GAGtBI,oBAAU,WACRP,EAAMQ,eAAeH,IACpB,CAACA,IAMJ,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQE,SANS,SAAAC,GACnBR,EAAQQ,EAAMC,OAAOjB,SAMjBW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,MAAd,WACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,MAAd,cCOOkB,eApBF,WACX,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAkBC,GAAG,mBAEvBT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACXH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAkBC,GAAG,sBAEvBT,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAkBC,GAAG,sBCalBC,cAbS,SAAA7B,GACtB,MAAO,CACLF,SAAUE,EAAMF,WAIO,SAAAgC,GACzB,MAAO,CACLZ,eAAgB,SAAApB,GAAQ,OACtBgC,EAAS,CAAEzB,KAAM,kBAAmBG,MAAOV,OAIlC+B,CAtBH,SAAAnB,GACV,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACU,EAAD,CAAQjC,SAAUY,EAAMZ,SAAUoB,eAAgBR,EAAMQ,iBACxDC,EAAAC,EAAAC,cAACW,EAAD,SCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECCNC,YAAa,GAAAC,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAKmC,KAALnC,OAAAkC,EAAA,EAAAlC,CAAmBoC,OAEhC,IAAMC,EAAW,CACfC,GAAIC,EACJC,GAAIC,GAGAC,EAAQC,YAAYlD,GAE1BiD,EAAME,UAAU,WACd,IAAMpD,EAAWkD,EAAMG,WAAWrD,SAClCsD,EAAYtD,KAGd,IAAMsD,EAAc,SAAAtD,GAClBuD,IAASC,OACPnC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAc4B,OAAQzD,EAAU6C,SAAUA,EAAS7C,IACjDqB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUR,MAAOA,GACf7B,EAAAC,EAAAC,cAACoC,EAAD,QAGJC,SAASC,eAAe,UAI5BP,EAAYJ,EAAMG,WAAWrD,UDqFvB,kBAAmB8D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6779bda8.chunk.js","sourcesContent":["const initialState = {\r\n  language: \"en\"\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_LANGUAGE\":\r\n      return { ...state, language: action.value };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nconst Navbar = props => {\r\n  const [lang, setLang] = useState(props.language);\r\n\r\n  useEffect(() => {\r\n    props.changeLanguage(lang);\r\n  }, [lang]);\r\n\r\n  const handleChange = event => {\r\n    setLang(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <select onChange={handleChange}>\r\n        <option value=\"en\">English</option>\r\n        <option value=\"fr\">French</option>\r\n      </select>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../styles/Home.css\";\r\n\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"main\">\r\n        <div className=\"hero\">\r\n          <h2 className=\"greeting\">\r\n            <FormattedMessage id=\"home.greeting\" />\r\n          </h2>\r\n          <p className=\"description\">\r\n            <FormattedMessage id=\"home.description\" />\r\n          </p>\r\n          <button>\r\n            <FormattedMessage id=\"home.button\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nimport \"./App.css\";\r\nimport Home from \"./components/Home\";\r\n\r\nconst App = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar language={props.language} changeLanguage={props.changeLanguage} />\r\n      <Home />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    language: state.language\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeLanguage: language =>\r\n      dispatch({ type: \"CHANGE_LANGUAGE\", value: language })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport { IntlProvider } from \"react-intl\";\r\nimport { addLocaleData } from \"react-intl\";\r\nimport locale_en from \"react-intl/locale-data/en\";\r\nimport locale_fr from \"react-intl/locale-data/fr\";\r\n\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport messages_en from \"./translations/en.json\";\r\nimport messages_fr from \"./translations/fr.json\";\r\n\r\naddLocaleData([...locale_en, ...locale_fr]);\r\n\r\nconst messages = {\r\n  en: messages_en,\r\n  fr: messages_fr\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.subscribe(() => {\r\n  const language = store.getState().language;\r\n  renderIndex(language);\r\n});\r\n\r\nconst renderIndex = language => {\r\n  ReactDOM.render(\r\n    <IntlProvider locale={language} messages={messages[language]}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </IntlProvider>,\r\n    document.getElementById(\"root\")\r\n  );\r\n};\r\n\r\nrenderIndex(store.getState().language);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}