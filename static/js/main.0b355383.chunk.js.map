{"version":3,"sources":["store/reducer.js","components/NavigationBar.js","components/Home.js","components/About.js","components/Footer.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js","assets/img/food.jpg","assets/img/dinner.jpg"],"names":["window","location","origin","initialState","language","href","replace","slice","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","value","NavigationBar","props","_useState","useState","_useState2","slicedToArray","lang","setLang","languagesObj","en","fr","useEffect","changeLanguage","react_default","a","createElement","Navbar_default","bg","variant","expand","Container_default","Brand","Form_default","Control","as","onChange","event","target","defaultValue","Toggle","aria-controls","Collapse","id","Nav_default","className","Link","to","index_es","Home","Carousel_default","Item","src","food","alt","Caption","dinner","About","Jumbotron_default","Button_default","Footer","PageNotFound","connect","dispatch","Fragment","react_router_dom","components_NavigationBar","react_router","exact","path","component","components_Footer","Boolean","hostname","match","addLocaleData","concat","toConsumableArray","locale_en","locale_fr","messages","messages_en","messages_fr","store","createStore","subscribe","getState","renderIndex","ReactDOM","render","locale","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0b355383.chunk.js","sourcesContent":["const { origin, href } = window.location;\r\nconst language = href.replace(origin, \"\").slice(1, 3);\r\n\r\nconst initialState = {\r\n  language: language\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_LANGUAGE\":\r\n      return { ...state, language: action.value };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nimport en from \"../translations/en\";\r\nimport fr from \"../translations/fr\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst NavigationBar = props => {\r\n  const [lang, setLang] = useState(props.language);\r\n\r\n  const languagesObj = {\r\n    en: en,\r\n    fr: fr\r\n  };\r\n\r\n  useEffect(() => {\r\n    props.changeLanguage(lang);\r\n  }, [lang]);\r\n\r\n  const handleChange = event => {\r\n    setLang(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\r\n      <Container>\r\n        <Navbar.Brand>\r\n          <Form.Control as=\"select\" onChange={handleChange} defaultValue={lang}>\r\n            <option value=\"en\">English</option>\r\n            <option value=\"fr\">French</option>\r\n          </Form.Control>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"ml-auto\">\r\n            <Nav.Link\r\n              as={Link}\r\n              to={\"/\" + lang + \"/\" + languagesObj[lang][\"url.home\"]}\r\n            >\r\n              <FormattedMessage id=\"nav.home\" />\r\n            </Nav.Link>\r\n            <Nav.Link\r\n              as={Link}\r\n              to={\"/\" + lang + \"/\" + languagesObj[lang][\"url.about\"]}\r\n            >\r\n              <FormattedMessage id=\"nav.about\" />\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\r\nimport \"../styles/Home.css\";\r\n\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\nimport food from \"../assets/img/food.jpg\";\r\nimport dinner from \"../assets/img/dinner.jpg\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Carousel>\r\n      <Carousel.Item>\r\n        <div className=\"image-container\">\r\n          <img className=\"d-block w-100\" src={food} alt=\"First slide\" />\r\n        </div>\r\n        <Carousel.Caption>\r\n          <h1>\r\n            <FormattedMessage id=\"carousel.image1.title\" />\r\n          </h1>\r\n          <p>\r\n            <FormattedMessage id=\"carousel.image1.description\" />\r\n          </p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className=\"d-block w-100\" src={dinner} alt=\"Third slide\" />\r\n\r\n        <Carousel.Caption>\r\n          <h1>\r\n            <FormattedMessage id=\"carousel.image2.title\" />\r\n          </h1>\r\n          <p>\r\n            <FormattedMessage id=\"carousel.image2.description\" />\r\n          </p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n    </Carousel>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Jumbotron>\r\n      <Container>\r\n        <h1>\r\n          <FormattedMessage id=\"about.title\" />\r\n        </h1>\r\n        <p>\r\n          <FormattedMessage id=\"about.message\" />\r\n        </p>\r\n        <br />\r\n        <hr />\r\n        <Button>\r\n          <FormattedMessage id=\"about.button\" />\r\n        </Button>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nimport \"../styles/footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"text-center py-3\">\r\n        © 2018 <FormattedMessage id=\"copyright\" />\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst PageNotFound = () => {\r\n  return (\r\n    <Jumbotron className=\"text-center\">\r\n      <Container>\r\n        <h3>\r\n          <FormattedMessage id=\"error.message\" />\r\n        </h3>\r\n        <hr />\r\n        <Button as={Link} to=\"/\">\r\n          <FormattedMessage id=\"error.button\" />\r\n        </Button>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport NavigationBar from \"./components/NavigationBar\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Footer from \"./components/Footer\";\nimport PageNotFound from \"./components/PageNotFound\";\n\nimport en from \"./translations/en\";\nimport fr from \"./translations/fr\";\n\nimport \"./App.css\";\n\nconst App = props => {\n  return (\n    <React.Fragment>\n      <Router>\n        <NavigationBar\n          language={props.language}\n          changeLanguage={props.changeLanguage}\n        />\n\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path={\"/en/\" + en[\"url.home\"]} component={Home} />\n          <Route exact path={\"/en/\" + en[\"url.about\"]} component={About} />\n          <Route exact path={\"/fr/\" + fr[\"url.home\"]} component={Home} />\n          <Route exact path={\"/fr/\" + fr[\"url.about\"]} component={About} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </Router>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    language: state.language\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeLanguage: language =>\n      dispatch({ type: \"CHANGE_LANGUAGE\", value: language })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { IntlProvider } from \"react-intl\";\nimport { addLocaleData } from \"react-intl\";\nimport locale_en from \"react-intl/locale-data/en\";\nimport locale_fr from \"react-intl/locale-data/fr\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./store/reducer\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport messages_en from \"./translations/en.json\";\nimport messages_fr from \"./translations/fr.json\";\n\naddLocaleData([...locale_en, ...locale_fr]);\n\nconst messages = {\n  en: messages_en,\n  fr: messages_fr\n};\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => {\n  const language = store.getState().language;\n  renderIndex(language);\n});\n\nconst renderIndex = language => {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </IntlProvider>,\n    document.getElementById(\"root\")\n  );\n};\n\nrenderIndex(store.getState().language);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/food.3ebbef94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dinner.b7e5f8cc.jpg\";"],"sourceRoot":""}